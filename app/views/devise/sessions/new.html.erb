<!-- app/views/devise/sessions/new.html.erb -->
<h2>Log in</h2>

<%= form_for(resource, as: resource_name, url: session_path(resource_name), html: { class: 'needs-validation', novalidate: true }) do |f| %>
  <% if flash[:alert] %>
    <div class="alert alert-danger" role="alert">
      <%= flash[:alert] %>
    </div>
  <% end %>

  <% if flash[:notice] %>
    <div class="alert alert-info" role="alert">
      <%= flash[:notice] %>
    </div>
  <% end %>

  <div class="mb-3">
    <%= f.label :email, class: 'form-label' %>
    <%= f.email_field :email, class: 'form-control', autofocus: true, autocomplete: "email", required: true %>
    <div class="invalid-feedback">
      Please provide a valid email address.
    </div>
  </div>

  <div class="mb-3">
    <%= f.label :password, class: 'form-label' %>
    <%= f.password_field :password, class: 'form-control', autocomplete: "current-password", required: true %>
    <div class="invalid-feedback">
      Please provide your password.
    </div>
  </div>

  <% if devise_mapping.rememberable? %>
    <div class="mb-3 form-check">
      <%= f.check_box :remember_me, class: 'form-check-input' %>
      <%= f.label :remember_me, class: 'form-check-label' %>
    </div>
  <% end %>

  <div class="d-grid">
    <%= f.submit "Log in", class: 'btn btn-primary' %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

<script>
  // Example starter JavaScript for disabling form submissions if there are invalid fields
  (function () {
    'use strict'

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.querySelectorAll('.needs-validation')

    // Loop over them and prevent submission
    Array.prototype.slice.call(forms)
      .forEach(function (form) {
        form.addEventListener('submit', function (event) {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }

          form.classList.add('was-validated')
        }, false)
      })
  })()
</script>
